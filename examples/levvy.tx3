// We should be able to split the templates into multiple files
// for example, we can have `plutus_addresses.tx3` that contains types
// for Plutus addresses and then import is to another file like so:
using plutus_addresses.{Address as PlutusAddress};

party Lender;
party Borrower;
party Treasury;
party TokenValidator;

// A policy can contain a utxo with the reference script
// but can also act as a party, in the case of Levvy though, since
// we are mixing script hash as the payment part and user's delegator part
// we can't send to this address directly, so we could just use it as a reference script
policy TokenValidatorRefScript = { 
    script_hash: "5dd6feba9bb5b3bfe0fc23da8519fed7ba8bc53bd838b7dec7c4226a", 
    outref: OutputReference { 
        tx_hash: "dd6feba9bb5b3bfe0fc23da8519fed7ba8bc53bd838b7dec7c4226a", 
        index: 0 
    }
};

// Support aliasing for readability
// 1. Maybe we can add `alias` keyword to the language to make them more readable
// but `type` should work as well, the same way as Aiken 
// e.g. `alias Lovelace = Int`
// 2. We can even add common aliases like `PolicyId`, `AssetName`, `Lovelace` to the language itself
type PolicyId = Bytes;
type AssetName = Bytes;
type Lovelace = Int;
type PosixTime = Int;

// Common types can be added to the language itself
type AssetClass {
    policy_id: PolicyId,
    asset_name: AssetName,
}

type OutputReference {
    tx_hash: Bytes,
    index: Int,
}

type LendTokenDetails {
    ada_owner: PlutusAddress,
    policy_id: PolicyId,
    asset_name: AssetName,
    token_amount: Int,
    loan_amount: Lovelace,
    interest_amount: Lovelace,
    loan_duration: Int,
    output_reference: OutputReference,
}

type BorrowTokenDetails {
    ada_owner: PlutusAddress,
    asset_owner: PlutusAddress,
    policy_id: PolicyId,
    asset_name: AssetName,
    token_amount: Int,
    loan_amount: Lovelace,
    interest_amount: Lovelace,
    loan_end_time: Int,
    output_reference: OutputReference,
}

type RepayTokenDetails {
    ada_owner: PlutusAddress,
    token_amount: Int,
    loan_amount: Lovelace,
    interest_amount: Lovelace,
    output_reference: OutputReference,
}

type TokenAction {
    BorrowTokenAction,
    RepayTokenAction,
    ClaimTokenAction,
    ForecloseTokenAction,
    CancelTokenAction,
}

type PaymentDatum {
  output_reference: OutputReference,
}

// An enum that can infer constructor index
type TokenDatum {
  LendTokenDatum(LendTokenDetails),
  BorrowTokenDatum(BorrowTokenDetails),
  RepayTokenDatum(RepayTokenDetails),
}

type TokenAction {
  BorrowTokenAction
  RepayTokenAction
  ClaimTokenAction
  ForecloseTokenAction
  CancelTokenAction
}

type LendParams {
    collateral_asset: AssetClass,
    collateral_amount: Int,
    principal_amount: Lovelace,
    interest_amount: Lovelace,
    loan_duration: Int,
    output_reference: OutputReference,
}

type BorrowParams {
    lend_position_outref: OutputReference,
    loan_amount: Lovelace
}

// We should be able to support list of actions in a transaction
// For example, in the case of Levvy, one can create multiple lend positions
// in a single transaction. Without support for interable list types, this would mean
// we have to create multiple transactions 
tx Lend(lend_params_list: LendParams[]) {
    input source {
        from: Lender,
        // There should be a way to aggregate values from a list
        min_amount: Ada(lend_params_list.sum(lpl => lpl.principal_amount)),
        // or min_amount: Ada(lend_params_list.sum(lpl => lpl.principal_amount).sum()),
    }

    // There should be a way to interate over a list
    // There should also be a way to refer the `outputs` of a specific context
    // in this case `loan_position_outputs` is the name for the list of outputs
    // generated in this iteration

    // Normal way to iterate over a list
    // foreach params in lend_params_list loan_position_outputs {
        // output {
        //     to: TokenValidator,
        //     amount: Ada(lend_params.loan_amount),
        //     datum: TokenDatum::LendTokenDatum(LendTokenDetails {
        //         // Convert from one type to another
        //         // e.g. from bytes address to Plutus address
        //         ada_owner: plutus_addresses.to_plutus_address(Lender),
        //         policy_id: params.collateral_asset.policy_id,
        //         asset_name: params.collateral_asset.asset_name,
        //         token_amount: params.collateral_amount,
        //         loan_amount: params.principal_amount,
        //         interest_amount: params.interest_amount,
        //         loan_duration: params.loan_duration,
        //         output_reference: params.output_reference,
        //     }),   
        // }
    // }

    // Or maybe something like this
    batch lend_positions = foreach (params in lend_params_list) {
        output {
            // In a real transaction, this would be an address type 1 where
            // we mix the script hash with the lender or borrower's stake key hash
            // this applies to all the transactions going to the TokenValidator
            to: TokenValidator,
            amount: Ada(param.loan_amount),
            datum: TokenDatum::LendTokenDatum(LendTokenDetails {
                ada_owner: plutus_addresses.to_plutus_address(Lender),
                policy_id: params.collateral_asset.policy_id,
                asset_name: params.collateral_asset.asset_name,
                token_amount: params.collateral_amount,
                loan_amount: params.principal_amount,
                interest_amount: params.interest_amount,
                loan_duration: params.loan_duration,
                output_reference: params.output_reference
            }),   
        }
    }

    output {
        to: Lender,
        // We can reference `loan_position_ouputs` here
        amount: source - Ada(lend_positions.outputs.sum(lpl => Ada(lpl.amount))) - fees,
    }
}

// Version 1: Introducing a way to filter inputs 
tx BorrowVersion1(loan_amount: Lovelace, max_interest: Int) {
    input lend_positions {
        from: TokenValidator,
        min_amount: Ada(loan_amount),
        datum_is: TokenDatum::BorrowTokenDatum(BorrowTokenDetails),
        // We can use a filter to get the inputs that we need
        // this is useful for batch transactions
        filter: (input) => {
            let interest = (input.interest_amount * 10_000 /* Inflate value */) / input.loan_amount
            interest <= max_interest 
        },
        redeemer: TokenAction::BorrowTokenAction,
    }

    // In this version we need a way to interate over the inputs and also a wayt to have a variable
    // that can be updated
    let unfilled_loan_amount = loan_amount;
    let total_collateral = 0;
    foreach(lend_position in lend_positions)
    {
        // It would be helpful to have a way to compute some values
        // and store the result in a variable, this is useful for complex 
        // validation logic, otherwise we can just pass it as params
        let current_loan_amount = unfilled_loan_amount > lend_position.loan_amount ? lend_position.loan_amount : unfilled_loan_amount;
        let loan_ratio = lend_position.loan_amount / params.loan_amount; // if float values are supported, otherwise we inflate
        let collateral_amount = lend_position.token_amount * loan_ratio;
        let interest_amount = lend_position.interest_amount * loan_ratio;

        // Borrow output that holds the collateral
        output {
            to: TokenValidator,
            // The use of `Asset` that accepts a policy_id, asset_name and amount
            // this is useful for assets that are not known at compile time
            amount: Asset(lend_position.policy_id, lend_position.asset_name, collateral_amount),
            datum: TokenDatum::BorrowTokenDatum(BorrowTokenDetails {
                ada_owner: lend_position.ada_owner,
                asset_owner: plutus_addresses.to_plutus_address(Borrower),
                policy_id: lend_position.policy_id,
                asset_name: lend_position.asset_name,
                token_amount: collateral_amount,
                loan_amount: params.loan_amount,
                interest_amount: interest_amount,
                // We can introduce a `now()` function to get the current unix timestamp
                // this is useful for a lot of use cases that require time-based logic
                loan_end_time: now() + lend_position.loan_duration,
                output_reference: params.lend_position_outref
            }),
        }

        // Platorm fee sent to the treasury wallet
        output {
            to: Treasury,
            amount: Ada(interest_amount) * 0.15,
            datum: PaymentDatum {
                output_reference: params.lend_position_outref,
            },
        }

        // We need some sort of conditional logic support
        // even just a basic if statement would be helpful
        if (current_loan_amount < lend_position.loan_amount) {
            // There is an extra output in case of a partial loan
            output {
                to: TokenValidator,
                amount: Ada(lend_position.loan_amount) - params.loan_amount,
                datum: TokenDatum::LendTokenDatum(LendTokenDetails {
                    ada_owner: lend_position.ada_owner,
                    policy_id: lend_position.policy_id,
                    asset_name: lend_position.asset_name,
                    token_amount: lend_position.token_amount - collateral_amount,
                    loan_amount: lend_position.loan_amount - params.loan_amount,
                    interest_amount: lend_position.interest_amount - interest_amount,
                    loan_duration: lend_position.loan_duration,
                    output_reference: params.lend_position_outref
                }),
            }
        }

        // Update the total collateral amount
        total_collateral += collateral_amount;

        // Update the unfilled loan amount
        unfilled_loan_amount -= current_loan_amount;
    }

    // This section here aggregates the result of the previous batch transaction
    // This is the total asset amount that the borrower needs to lock
    input borrower_collateral_input {
        from: Borrower,
        min_amount: Asset(collateral_asset.policy_id, collateral_asset.asset_name, total_collateral)
    }

    // This is the total amount the borrower loaned plus whatever is left from the inputs used
    // for the collateral
    output {
        to: Borrower,
        amount: loan_amount + borrower_collateral_input - fees
    }

    // Maybe a special field for reference input?
    reference_input TokenValidatorRefScript

    // Since this is a smart contract transaction, we may want a way to set collateral
    // this can be ommitted if this will be handled automatically
    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }

    // Also, for time-based logic, we need to pass validity range
    // somthing like this:
    valid_from now()
    valid_until now() + 1000
}

// Version 2: Passing the UTxOs as params
tx BorrowVersion2(
    borrow_params_list: BorrowParams[], 
    total_collateral: Int,
    collateral_asset: AssetClass
) {
    // Version 2: UTxOs directly passed as params
    batch borrow_positions = foreach (params in borrow_params_list) {
        input lend_position {
            from: TokenValidator,
            ref: params.lend_position_outref,
            datum_is: TokenDatum::LendTokenDatum(LendTokenDetails),
            redeemer: TokenAction::BorrowTokenAction
        }

        // It would be helpful to have a way to compute some values
        // and store the result in a variable, this is useful for complex 
        // validation logic, otherwise we can just pass it as params
        // also a side note: if the `datum_is: TokenDatum::LendTokenDatum(LendTokenDetails)`
        // how would we be able to access the `LendTokenDetails` value?
        // For this example, I would assume that to access inner types, we just use 1st, 2nd etc. as if
        // they are just tuples:
        let lend_token_details = lend_position.1st
        let loan_ratio = lend_token_details.loan_amount / params.loan_amount
        let collateral_amount = lend_token_details.token_amount * loan_ratio
        let interest_amount = lend_token_details.interest_amount * loan_ratio

        // Borrow output that holds the collateral
        output {
            to: TokenValidator,
            // The use of `Asset` that accepts a policy_id, asset_name and amount
            // this is useful for assets that are not known at compile time
            amount: Asset(lend_token_details.policy_id, lend_token_details.asset_name, collateral_amount),
            datum: TokenDatum::BorrowTokenDatum(BorrowTokenDetails {
                ada_owner: lend_token_details.ada_owner,
                asset_owner: plutus_addresses.to_plutus_address(Borrower),
                policy_id: lend_token_details.policy_id,
                asset_name: lend_token_details.asset_name,
                token_amount: collateral_amount,
                loan_amount: params.loan_amount,
                interest_amount: interest_amount,
                // We can introduce a `now()` function to get the current unix timestamp
                // this is useful for a lot of use cases that require time-based logic
                loan_end_time: now() + lend_token_details.loan_duration,
                output_reference: params.lend_position_outref
            }),
        }

        // Platorm fee sent to the treasury wallet
        output {
            to: Treasury,
            amount: Ada(interest_amount) * 0.15,
            datum: PaymentDatum {
                output_reference: params.lend_position_outref,
            },
        }

        // We need some sort of conditional logic support
        // even just a basic if statement would be helpful
        if (params.loan_amount < lend_position.loan_amount) {
            // There is an extra output in case of a partial loan
            output {
                to: TokenValidator,
                amount: Ada(lend_position.loan_amount) - params.loan_amount,
                datum: TokenDatum::LendTokenDatum(LendTokenDetails {
                    ada_owner: lend_token_details.ada_owner,
                    policy_id: lend_token_details.policy_id,
                    asset_name: lend_token_details.asset_name,
                    token_amount: lend_token_details.token_amount - collateral_amount,
                    loan_amount: lend_position.loan_amount - params.loan_amount,
                    interest_amount: lend_token_details.interest_amount - interest_amount,
                    loan_duration: lend_token_details.loan_duration,
                    output_reference: params.lend_position_outref
                }),
            }
        }
    }

    // This section here aggregates the result of the previous batch transaction
    // This is the total asset amount that the borrower needs to lock
    input borrower_collateral_input {
        from: Borrower,
        min_amount: Asset(collateral_asset.policy_id, collateral_asset.asset_name, total_collateral)
    }

    // This is the total amount the borrower loaned plus whatever is left from the inputs used
    // for the collateral
    output {
        to: Borrower,
        amount: Ada(borrow_params_list.sum(bpl => bpl.loan_amount)) + (borrower_collateral_input) - fees
    }

    // Maybe a special field for reference input?
    reference_input TokenValidatorRefScript

    // Since this is a smart contract transaction, we may want a way to set collateral
    // this can be ommitted if this will be handled automatically
    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }

    // Also, for time-based logic, we need to pass validity range
    // somthing like this:
    valid_from now()
    valid_until now() + 1000
}

tx Repay(outrefs: OutputReference[]) {
    // I am going to introduce a new type, I'm gonna call it evolving output
    // this would be really cool and intuitive to use (in my opinion)
    output borrower_output {
        to: Borrower,
        amount: zero() // initially zero
    }

    // How about a evolving input too?
    input repay_input {
        from: Borrower,
        min_amount: zero() // initially zero
    }

    batch repay_positions = foreach (outref in outrefs) {
        input borrow_position {
            from: TokenValidator,
            ref: outref,
            datum_is: TokenDatum::BorrowTokenDatum(BorrowTokenDetails),
            redeemer: TokenAction::RepayTokenAction,
        }

        // Here we update our evolving output
        // also a side note: since the output is updateable, it can now handle multiple
        // positions of different collateral assets with no additional logic
        borrower_output.amount += Asset(borrow_position.policy_id, borrow_position.asset_name, borrow_position.token_amount)

        // Now let's update the input, since the borrower needs to pay the loan amount + interest amount
        repay_input.min_amount += Ada(borrow_position.loan_amount + borrow_position.interest_amount)

        // Repay position, maybe we can just name outputs the same as inputs can be named
        // it makes it easier to read, e.g. `output repay_output`
        output {
            to: TokenValidator,
            amount: borrow_position.loan_amount + borrow_position.interest_amount,
            datum: TokenDatum::RepayTokenDatum(RepayTokenDetails {
                ada_owner: borrow_position.ada_owner,
                token_amount: borrow_position.token_amount,
                loan_amount: borrow_position.loan_amount,
                interest_amount: borrow_position.interest_amount,
                output_reference: outref,
            }),
        }

        // Platform fee sent to the treasury wallet
        output {
            to: Treasury,
            // Just a side note, this may be below min ada value
            // unless this is handled automatically, maybe we can also 
            // introduce some basic math operations like Math.max(a, b)
            amount: Ada(borrow_position.interest_amount) * 0.15,
            datum: PaymentDatum {
                output_reference: outref,
            },
        }
    }

    // Now we don't have to worry about the calculations, this makes the code so much cleaner
    // now we just need to deduct the fees from the borrower output
    borrower_output.amount -= fees

    // Let's not forget about the required signer, the borrower needs to sign because the contract
    // does not check if the collateral was indeed sent to the borrower's wallet
    required_signers [Borrower] // just the pkh of borrower, but it can accept multiple signers

    reference_input TokenValidatorRefScript

    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }
}

tx Foreclose(outrefs: OutputReference[]) {
    // We're going to use evolving inputs and outputs for this action again
    // The lender will need to pay the platform fees when foreclosing
    // so we need an updateable input for that
    input foreclose_input {
        from: Lender,
        min_amount: zero() // initially zero
    }

    // The lender will receive the collateral assets, but we don't know how many...yet
    // so we need an updateable output for that too
    output lender_output {
        to: Lender,
        amount: zero() // initially zero
    }

    // We don't need the result of the batch transaction, so we can just use a foreach loop
    // without passing the result to a variable
    foreach (outref in outrefs) {
        input borrow_position {
            from: TokenValidator,
            ref: outref,
            datum_is: TokenDatum::BorrowTokenDatum(BorrowTokenDetails),
            redeemer: TokenAction::ForecloseTokenAction,
        }

        // Update the evolving input since the lender needs to pay the platform fees
        foreclose_input.min_amount += Ada(borrow_position.interest_amount) * 0.15 

        // Update the evolving output because the lender will receive the collateral
        lender_output.amount += Asset(borrow_position.policy_id, borrow_position.asset_name, borrow_position.token_amount)

        // Platform fee sent to the treasury wallet
        output {
            to: Treasury,
            amount: Ada(borrow_position.interest_amount) * 0.15,
            datum: PaymentDatum {
                output_reference: outref,
            },
        }
    }

    // Deduct the fees from the lender output
    lender_output.amount -= fees

    // The lender needs to sign the transaction because the contract requires it
    required_signers [Lender] 

    reference_input TokenValidatorRefScript

    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }

    // Since foreclosing is a time-based action, we need to set the validity range
    valid_from now()
    valid_until now() + 1000
}

tx Claim(outrefs: OutputReference[]) {
    // Since we know that claim utxos are always pure ADA, We will not need an evolving input
    // to pay the platform fees, we can just use the ADA locked in the utxos
    output lender_output {
        to: Lender,
        amount: zero() // initially zero
    }

    foreach(outref in outrefs) {
        input claim_position {
            from: TokenValidator,
            ref: outref,
            datum_is: TokenDatum::RepayTokenDatum(RepayTokenDetails),
            redeemer: TokenAction::ClaimTokenAction,
        }

        // Platform fee sent to the treasury wallet
        output {
            to: Treasury,
            amount: Ada(claim_position.interest_amount * 0.15),
            datum: PaymentDatum {
                output_reference: outref,
            },
        }

        // Update the evolving output since the lender will receive the collateral
        lender_output.amount += Ada(claim_position.loan_amount) - Ada(claim_position.interest_amount * 0.15)
    }

    // Deduct the fees from the lender output
    lender_output.amount -= fees

    // The lender needs to sign the transaction because the contract requires it
    required_signers [Lender]

    reference_input TokenValidatorRefScript

    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }
}

tx Cancel(outrefs: OutputReference[]) {
    output lender_output {
        to: Lender,
        amount: zero() // initially zero
    }

    foreach(outref in outrefs) {
        input lend_position {
            from: TokenValidator,
            ref: outref,
            datum_is: TokenDatum::LendTokenDatum(LendTokenDetails),
            redeemer: TokenAction::CancelTokenAction,
        }

        // Update the evolving output since the lender will receive the collateral
        // is lend_position.amount possible?
        lender_output.amount += lend_position.amount
    }

    // Deduct the fees from the lender output
    lender_output.amount -= fees

    // The lender needs to sign the transaction because the contract requires it
    required_signers [Lender]

    reference_input TokenValidatorRefScript

    collateral {
        from: Borrower,
        min_amount: Ada(5)
    }
}